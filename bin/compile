#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

### Configure environment

set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

### Constants

# This is used by the buildpack stdlib for metrics
# shellcheck disable=SC2034
BPLOG_PREFIX="buildpack.nodejs"

### Configure directories

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd "$(dirname "${0:-}")"; cd ..; pwd)

### Load dependencies

# shellcheck source=lib/vendor/stdlib_v7.sh
source "$BP_DIR/lib/vendor/stdlib_v7.sh"
# shellcheck source=lib/output.sh
source "$BP_DIR/lib/output.sh"
# shellcheck source=lib/monitor.sh
source "$BP_DIR/lib/monitor.sh"
# shellcheck source=lib/environment.sh
source "$BP_DIR/lib/environment.sh"
# shellcheck source=lib/failure.sh
source "$BP_DIR/lib/failure.sh"
# shellcheck source=lib/binaries.sh
source "$BP_DIR/lib/binaries.sh"
# shellcheck source=lib/json.sh
source "$BP_DIR/lib/json.sh"
# shellcheck source=lib/cache.sh
source "$BP_DIR/lib/cache.sh"
# shellcheck source=lib/dependencies.sh
source "$BP_DIR/lib/dependencies.sh"
# shellcheck source=lib/plugin.sh
source "$BP_DIR/lib/plugin.sh"
# shellcheck source=lib/uuid.sh
source "$BP_DIR/lib/uuid.sh"
# shellcheck source=lib/kvstore.sh
source "$BP_DIR/lib/kvstore.sh"
# shellcheck source=lib/metadata.sh
source "$BP_DIR/lib/metadata.sh"
# shellcheck source=lib/features.sh
source "$BP_DIR/lib/features.sh"
# shellcheck source=lib/builddata.sh
source "$BP_DIR/lib/builddata.sh"
# shellcheck source=lib/yarn-2.sh
source "$BP_DIR/lib/yarn-2.sh"

export PATH="$BUILD_DIR/.heroku/node/bin:$BUILD_DIR/.heroku/yarn/bin":$PATH

LOG_FILE=$(mktemp -t node-build-log.XXXXX)
echo "" > "$LOG_FILE"

build_start_time=$(nowms)

### Handle errors

handle_failure() {
  meta_set "node-build-success" "false"
  header "Build failed"
  fail_yarn_outdated "$LOG_FILE"
  fail_yarn_lockfile_outdated "$LOG_FILE"
  fail_node_install "$LOG_FILE" "$BUILD_DIR"
  fail_yarn_install "$LOG_FILE" "$BUILD_DIR"
  fail_invalid_semver "$LOG_FILE"
  log_other_failures "$LOG_FILE"
  warn_aws_proxy "$BUILD_DIR"
  warn_untracked_dependencies "$LOG_FILE"
  warn_angular_resolution "$LOG_FILE"
  warn_missing_devdeps "$LOG_FILE" "$BUILD_DIR"
  warn_econnreset "$LOG_FILE"
  log_meta_data >> "$BUILDPACK_LOG_FILE"
  failure_message | output "$LOG_FILE"
}
trap 'handle_failure' ERR

### Initalize metadata store
# Create the metadata store
meta_init "$CACHE_DIR"
# Make sure that it's empty and save any previous build's data
meta_setup
# the "build-step" key keeps track of where we are in the execution
# so that we can see where failed builds errored
meta_set "build-step" "init"

### Check initial state

[ -e "$BUILD_DIR/node_modules" ] && PREBUILD=true || PREBUILD=false
[ -f "$BUILD_DIR/yarn.lock" ] && YARN=true || YARN=false
[ -f "$BUILD_DIR/package-lock.json" ] && NPM_LOCK=true || NPM_LOCK=false
YARN_2=$(detect_yarn_2 "$YARN" "$BUILD_DIR")

### Save build info
features_init "nodejs" "$BUILD_DIR" "$CACHE_DIR" "$BP_DIR/features"
log_initial_state
generate_uuids

### Failures that should be caught immediately

fail_dot_heroku "$BUILD_DIR"
fail_dot_heroku_node "$BUILD_DIR"
fail_invalid_package_json "$BUILD_DIR"
fail_multiple_lockfiles "$BUILD_DIR"
fail_iojs_unsupported "$BUILD_DIR"
warn_prebuilt_modules "$BUILD_DIR"
warn_missing_package_json "$BUILD_DIR"

### Gather more project information

# we know that package.json is valid json, and can pull more data out
log_project_info "$BUILD_DIR"

### Compile

create_env() {
  write_profile "$BP_DIR" "$BUILD_DIR"
  write_export "$BP_DIR" "$BUILD_DIR"
  export_env_dir "$ENV_DIR"
  create_default_env "$YARN"
}

header "Creating runtime environment" | output "$LOG_FILE"

mkdir -p "$BUILD_DIR/.heroku/node/"
cd "$BUILD_DIR"
create_env # can't pipe the whole thing because piping causes subshells, preventing exports
list_node_config | output "$LOG_FILE"
create_build_env

### Configure package manager cache directories
[ ! "$YARN_CACHE_FOLDER" ] && YARN_CACHE_FOLDER=$(mktemp -d -t yarncache.XXXXX)
[ ! "$NPM_CONFIG_CACHE" ] && NPM_CONFIG_CACHE=$(mktemp -d -t npmcache.XXXXX)
export YARN_CACHE_FOLDER NPM_CONFIG_CACHE

### Configure vendored package manager
export VENDOR_PATH

if [[ "$YARN_2" == "true" ]]; then
  fail_yarn_2_production "$BUILD_DIR"

  if [[ "$NODE_MODULES_CACHE" == "true" ]]  && ! node_modules_enabled "$BUILD_DIR"; then
    warn "
    The buildpack won't cache the dependencies in .yarn/cache. Since you're using Yarn 2 and Plug'n'Play, you will need to customize your cache or unset NODE_MODULES_CACHE." "https://devcenter.heroku.com/articles/migrating-to-yarn-2#disable-dependency-caching"
  fi

  if [[ -f "$BUILD_DIR/.npmrc" ]]; then
    warn "There is an existing .npmrc file that will not be used. All configurations are read from the .yarnrc.yml file." "https://devcenter.heroku.com/articles/migrating-to-yarn-2"
  fi

  if [[ -f "$BUILD_DIR/.yarnrc" ]]; then
    warn "There is an existing .yarnrc file that will not be used. All configurations are read from the .yarnrc.yml file." "https://devcenter.heroku.com/articles/migrating-to-yarn-2"
  fi

  if has_yarn_cache "$BUILD_DIR"; then
    YARN_CACHE_FOLDER="$BUILD_DIR/.yarn/cache"
  fi

  ### Configure Yarn 2
  # fail for no yarnrc.yml
  fail_missing_yarnrc_yml "$BUILD_DIR"

  # get yarn_path
  VENDOR_PATH=$(get_yarn_path "$BUILD_DIR")

  # fail for no yarnPath in rc
  fail_missing_yarn_path "$BUILD_DIR" "$VENDOR_PATH"

  # fail for missing yarn in .yarn/releases
  fail_missing_yarn_vendor "$BUILD_DIR" "$VENDOR_PATH"
fi

if [[ $(features_get "cache-native-yarn-cache") == "false" ]]; then
  warn "You're currently using the heroku-buildpack-features file to configure. Using Yarn Cache has moved behind an environment variable. Use 'heroku config:set USE_YARN_CACHE=false' to set the variable."
  USE_YARN_CACHE=false
fi

install_bins() {
  local node_engine npm_engine yarn_engine npm_version node_version

  node_engine=$(read_json "$BUILD_DIR/package.json" ".engines.node")
  npm_engine=$(read_json "$BUILD_DIR/package.json" ".engines.npm")
  yarn_engine=$(read_json "$BUILD_DIR/package.json" ".engines.yarn")

  if [[ "$YARN_2" == "true" && -n "$yarn_engine" ]]; then
    warn "You don't need to specify Yarn engine. Heroku will install the latest Yarn 1.x, so that per project version can be used. More information here: https://yarnpkg.com/getting-started/install#global-install"
    unset yarn_engine
  fi

  meta_set "node-version-request" "$node_engine"
  meta_set "npm-version-request" "$npm_engine"
  meta_set "yarn-version-request" "$yarn_engine"

  echo "engines.node (package.json):  ${node_engine:-unspecified}"
  echo "engines.npm (package.json):   ${npm_engine:-unspecified (use default)}"
  if $YARN || [ -n "$yarn_engine" ]; then
    echo "engines.yarn (package.json):  ${yarn_engine:-unspecified (use default)}"
  fi
  echo ""

  warn_node_engine "$node_engine"

  meta_set "build-step" "install-nodejs"
  monitor "install-node-binary" install_nodejs "$node_engine" "$BUILD_DIR/.heroku/node"

  meta_set "build-step" "install-npm"
  monitor "install-npm-binary" install_npm "$npm_engine" "$BUILD_DIR/.heroku/node" $NPM_LOCK

  node_version="$(node --version)"
  mcount "version.node.$node_version"
  meta_set "node-version" "$node_version"

  # Download yarn if there is a yarn.lock file or if the user
  # has specified a version of yarn under "engines". We'll still
  # only install using yarn if there is a yarn.lock file
  if $YARN || [ -n "$yarn_engine" ]; then
    meta_set "build-step" "install-yarn"
    monitor "install-yarn-binary" install_yarn "$BUILD_DIR/.heroku/yarn" "$yarn_engine"
  fi

  if $YARN; then
    mcount "version.yarn.$(yarn --version)"
    meta_set "yarn-version" "$(yarn --version)"
  else
    mcount "version.npm.$(npm --version)"
    meta_set "npm-version" "$(npm --version)"
  fi

  warn_old_npm

  if [[ $YARN_2 == true ]]; then
    YARN=false
  fi
}

header "Installing binaries" | output "$LOG_FILE"
install_bins | output "$LOG_FILE"

restore_cache() {
  local cache_status cache_directories restore_cache_start_time
  restore_cache_start_time=$(nowms)

  cache_status="$(get_cache_status "$CACHE_DIR")"
  cache_directories="$(get_cache_directories "$BUILD_DIR")"

  if $YARN; then
    if $PREBUILD && [[ "$SKIP_NODE_MODULES_CHECK" == "true" ]]; then
      echo "Keeping existing node_modules because SKIP_NODE_MODULES_CHECK=${SKIP_NODE_MODULES_CHECK}"
    elif $PREBUILD; then
      warn "node_modules checked into source control" "https://devcenter.heroku.com/articles/node-best-practices#only-git-the-important-bits"
      rm -rf "$BUILD_DIR/node_modules"
    fi
  fi

  if [[ "$cache_status" == "disabled" ]]; then
    header "Restoring cache"
    echo "Caching has been disabled because NODE_MODULES_CACHE=${NODE_MODULES_CACHE}"
  elif [[ "$cache_status" == "valid" ]]; then
    header "Restoring cache"
    if [[ "$cache_directories" == "" ]]; then
      restore_default_cache_directories "$BUILD_DIR" "$CACHE_DIR" "$YARN_CACHE_FOLDER"
    else
      restore_custom_cache_directories "$BUILD_DIR" "$CACHE_DIR" "$cache_directories"
    fi
  elif [[ "$cache_status" == "new-signature" ]]; then
    header "Restoring cache"
    if [[ "$cache_directories" == "" ]]; then
      echo "Cached directories were not restored due to a change in version of node, npm, yarn or stack"
      echo "Module installation may take longer for this build"
    else
      # If the user has specified custom cache directories, be more explicit
      echo "Invalidating cache due to a change in version of node, npm, yarn or stack"
      echo "Will not restore the following directories for this build:"
      for directory in $cache_directories; do
        echo "  $directory"
      done
    fi
  else
    # No cache exists, be silent
    :
  fi

  mcount "cache.$cache_status"
  meta_set "cache-status" "$cache_status"
  meta_time "restore-cache-time" "$restore_cache_start_time"
}

meta_set "build-step" "restore-cache"
restore_cache | output "$LOG_FILE"

build_dependencies() {
  local cache_status start

  cache_status="$(get_cache_status "$CACHE_DIR")"
  start=$(nowms)
  if [[ "$YARN_2" == "true" ]]; then
    yarn_2_install "$BUILD_DIR"
  elif $YARN; then
    yarn_node_modules "$BUILD_DIR"
  elif $PREBUILD; then
    echo "Prebuild detected (node_modules already exists)"
    npm_rebuild "$BUILD_DIR"
  else
    npm_node_modules "$BUILD_DIR"
  fi

  mtime "modules.time.cache.$cache_status" "${start}"

  meta_set "build-step" "build-script"
  header "Build"
  run_build_script "$BUILD_DIR"
}

meta_set "build-step" "install-dependencies"
log_build_scripts "$BUILD_DIR"
run_prebuild_script "$BUILD_DIR" | output "$LOG_FILE"
header "Installing dependencies" | output "$LOG_FILE"
build_dependencies | output "$LOG_FILE"

cache_build() {
  local cache_directories cache_build_start_time
  cache_build_start_time=$(nowms)
  cache_directories="$(get_cache_directories "$BUILD_DIR")"

  clear_cache "$CACHE_DIR"
  if ! ${NODE_MODULES_CACHE:-true}; then
    # we've already warned that caching is disabled in the restore step
    # so be silent here
    :
  elif [[ "$cache_directories" == "" ]]; then
    header "Caching build"
    save_default_cache_directories "$BUILD_DIR" "$CACHE_DIR" "$YARN_CACHE_FOLDER"
  else
    header "Caching build"
    save_custom_cache_directories "$BUILD_DIR" "$CACHE_DIR" "$cache_directories"
  fi
  save_signature "$CACHE_DIR"
  meta_time "save-cache-time" "$cache_build_start_time"
}

prune_devdependencies() {
  if $YARN; then
    yarn_prune_devdependencies "$BUILD_DIR"
  else
    npm_prune_devdependencies "$BUILD_DIR"
  fi
}

# if we are using yarn
#   and in the new feature
#   and we're using the default cache directories
# then save off the cache after we prune out devDepenencies
if [[ "$YARN_2" == "true" ]]; then
  cache_build | output "$LOG_FILE"
  meta_set "build-step" "prune-dependencies"
  meta_set "build-step" "save-cache"
elif [[ "$YARN" == "true" ]] && [[ "$USE_YARN_CACHE" == "true" ]] && [[ "$(get_cache_directories "$BUILD_DIR")" == "" ]]; then
  meta_set "build-step" "prune-dependencies"
  header "Pruning devDependencies" | output "$LOG_FILE"
  prune_devdependencies | output "$LOG_FILE"
  meta_set "build-step" "save-cache"
  cache_build | output "$LOG_FILE"
else
  meta_set "build-step" "save-cache"
  cache_build | output "$LOG_FILE"
  meta_set "build-step" "prune-dependencies"
  header "Pruning devDependencies" | output "$LOG_FILE"
  prune_devdependencies | output "$LOG_FILE"
fi

meta_set "build-step" "cleanup-script"
run_cleanup_script "$BUILD_DIR" | output "$LOG_FILE"

summarize_build() {
  if $NODE_VERBOSE; then
    list_dependencies "$BUILD_DIR"
  fi

  mmeasure 'modules.size' "$(measure_size)"
  meta_set "node-modules-size" "$(measure_size)"
}

meta_set "build-step" "install-metrics-plugin"
install_plugin "$BP_DIR" "$BUILD_DIR"

meta_set "build-step" "summarize"
header "Build succeeded!" | output "$LOG_FILE"
mcount "compile"
summarize_build | output "$LOG_FILE"
meta_set "node-build-success" "true"
meta_time "build-time" "$build_start_time"

warn_no_start "$BUILD_DIR"
warn_unmet_dep "$LOG_FILE"
warn_old_npm_lockfile $NPM_LOCK

meta_set "build-step" "finished"
log_meta_data >> "$BUILDPACK_LOG_FILE"


######################################################
###### Adicionado por miguel 16-09-2020 ##############
######################################################


#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# debug
# set -x

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

LP_DIR=`cd $(dirname $0); cd ..; pwd`

function error() {
  echo " !     $*" >&2
  exit 1
}

function topic() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

# Detect requested channel or default to stable
if [ -f $ENV_DIR/GOOGLE_CHROME_CHANNEL ]; then
  channel=$(cat $ENV_DIR/GOOGLE_CHROME_CHANNEL)
else
  channel=stable
fi

# Setup bin and shim locations for desired channel, and detect invalid channels
case "$channel" in
  "stable")
    BIN=chrome/chrome
    SHIM=google-chrome-stable
    ;;
  "beta")
    BIN=chrome-beta/chrome
    SHIM=google-chrome-beta
    ;;
  "unstable")
    BIN=chrome-unstable/chrome
    SHIM=google-chrome-unstable
    ;;
  *)
    error "GOOGLE_CHROME_CHANNEL must be 'stable', 'beta', or 'unstable', not '$channel'."
    ;;
esac

stack=${STACK:-heroku-16}

# Install correct dependencies according to $STACK
case "$stack" in
  "cedar-14")
    PACKAGES="libxss1"
    ;;
  "heroku-16" | "heroku-18" | "heroku-20")
    # the package list is found by using ci:debug then running ldd $GOOGLE_CHROME_BIN | grep not
    # also look here for more packages/notes https://developers.google.com/web/tools/puppeteer/troubleshooting
    PACKAGES="
      gconf-service
      libappindicator1
      libasound2
      libatk1.0-0
      libatk-bridge2.0-0
      libcairo-gobject2
      libdrm2
      libgbm1
      libgconf-2-4
      libgtk-3-0
      libnspr4
      libnss3
      libx11-xcb1
      libxcb-dri3-0
      libxcomposite1
      libxcursor1
      libxdamage1
      libxfixes3
      libxi6
      libxinerama1
      libxrandr2
      libxss1
      libxtst6
      fonts-liberation
    "
    ;;
  *)
    error "STACK must be 'cedar-14', 'heroku-16', 'heroku-18' or 'heroku-20', not '$stack'."
esac

if [ ! -f $CACHE_DIR/PURGED_CACHE_V1 ]; then
  topic "Purging cache"
  rm -rf $CACHE_DIR/apt
  rm -rf $CACHE_DIR/archives
  rm -rf $CACHE_DIR/lists
  touch $CACHE_DIR/PURGED_CACHE_V1
fi

topic "Installing Google Chrome from the $channel channel."

PACKAGES="$PACKAGES https://dl.google.com/linux/direct/google-chrome-${channel}_current_amd64.deb"

APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"

mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"

APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"

topic "Updating apt caches"
apt-get $APT_OPTIONS update | indent

for PACKAGE in $PACKAGES; do
  if [[ $PACKAGE == *deb ]]; then
    PACKAGE_NAME=$(basename $PACKAGE .deb)
    PACKAGE_FILE=$APT_CACHE_DIR/archives/$PACKAGE_NAME.deb

    topic "Fetching $PACKAGE"
    curl -s -L -z $PACKAGE_FILE -o $PACKAGE_FILE $PACKAGE 2>&1 | indent
  else
    topic "Fetching .debs for $PACKAGE"
    apt-get $APT_OPTIONS -y --force-yes -d install --reinstall $PACKAGE | indent
  fi
done

mkdir -p $BUILD_DIR/.apt

for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
  topic "Installing $(basename $DEB)"
  dpkg -x $DEB $BUILD_DIR/.apt/
done

topic "Writing profile script"
mkdir -p $BUILD_DIR/.profile.d
cat <<EOF >$BUILD_DIR/.profile.d/000_apt.sh
export PATH="\$HOME/.apt/usr/bin:\$PATH"
export LD_LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LD_LIBRARY_PATH"
export LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LIBRARY_PATH"
export INCLUDE_PATH="\$HOME/.apt/usr/include:\$HOME/.apt/usr/include/x86_64-linux-gnu:\$INCLUDE_PATH"
export CPATH="\$INCLUDE_PATH"
export CPPPATH="\$INCLUDE_PATH"
export PKG_CONFIG_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/i386-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/pkgconfig:\$PKG_CONFIG_PATH"
EOF

export PATH="$BUILD_DIR/.apt/usr/bin:$PATH"
export LD_LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$LD_LIBRARY_PATH"
export LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$LIBRARY_PATH"
export INCLUDE_PATH="$BUILD_DIR/.apt/usr/include:$BUILD_DIR/.apt/usr/include/x86_64-linux-gnu:$INCLUDE_PATH"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"
export PKG_CONFIG_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/pkgconfig:$PKG_CONFIG_PATH"

#give environment to later buildpacks
export | grep -E -e ' (PATH|LD_LIBRARY_PATH|LIBRARY_PATH|INCLUDE_PATH|CPATH|CPPPATH|PKG_CONFIG_PATH)='  > "$LP_DIR/export"

topic "Rewrite package-config files"
find $BUILD_DIR/.apt -type f -ipath '*/pkgconfig/*.pc' | xargs --no-run-if-empty -n 1 sed -i -e 's!^prefix=\(.*\)$!prefix='"$BUILD_DIR"'/.apt\1!g'

topic "Creating google-chrome shims"

BIN_DIR=$BUILD_DIR/.apt/usr/bin

rm $BIN_DIR/$SHIM
cat <<EOF >$BIN_DIR/$SHIM
#!/usr/bin/env bash
if [ \$1 = "--version" ]; then
  exec \$HOME/.apt/opt/google/$BIN --version
elif [ \$1 = "--product-version" ]; then
  exec \$HOME/.apt/opt/google/$BIN --product-version
else
  exec \$HOME/.apt/opt/google/$BIN --headless --no-sandbox --disable-gpu --remote-debugging-port=9222 \$@
fi
EOF
chmod +x $BIN_DIR/$SHIM
cp $BIN_DIR/$SHIM $BIN_DIR/google-chrome

# export the chrome binary location, so it's easier to tell chromedriver
# about the non-standard location
cat <<EOF >$BUILD_DIR/.profile.d/010_google-chrome.sh
export GOOGLE_CHROME_BIN="\$HOME/.apt/opt/google/$BIN"
export GOOGLE_CHROME_SHIM="\$HOME/.apt/usr/bin/$SHIM"
EOF

